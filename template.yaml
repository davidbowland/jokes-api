AWSTemplateFormatVersion: 2010-09-09
Description: >-
  jokes-api

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  AccountId:
    Type: String
    Description: AWS account ID
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      certificate: 5d4db894-c9fc-42ca-8f80-3c5da6c1678e
      corsDomain: https://jokes.dbowland.com
      domain: jokes-api.dbowland.com
      table: jokes-api
      userPool: us-east-2_cPuwPJkP8
      userPoolClient: 5mujt7f6h9jh6pudk0t8ekngu
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificate: 14a32175-0c26-4768-b71f-3fa611b8f5a2
      corsDomain: https://jokes.bowland.link
      domain: jokes-api.bowland.link
      table: jokes-api-test
      userPool: us-east-2_BwzCUS5q1
      userPoolClient: o86e0r33q0pfekelprpcvmdou
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub
                - 'https://cognito-idp.us-east-2.amazonaws.com/${UserPool}'
                - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
              audience:
                - !FindInMap [EnvironmentMap, !Ref Environment, userPoolClient]
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-2:${AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      FailOnWarnings: true

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/delete-item.deleteByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  DeleteItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteItemFunction}
      RetentionInDays: 30

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-all-items.getAllItemsHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllItemsFunction}
      RetentionInDays: 30

  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-by-id.getByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetByIdFunction}
      RetentionInDays: 30

  GetRandomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-random.getRandomHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get random jokes
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
          RANDOM_COUNT_MAXIMUM: 10
      Events:
        NoAuth:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/random
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetRandomLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetRandomFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRandomFunction}
      RetentionInDays: 30

  PatchItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/patch-item.patchItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchItemFunction}
      RetentionInDays: 30

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/post-item.postItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PostLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostItemFunction}
      RetentionInDays: 30

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/put-item.putItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api put item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PutLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PutItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutItemFunction}
      RetentionInDays: 30

  JokesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Index
        Type: Number
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, table]
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
