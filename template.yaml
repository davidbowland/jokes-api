AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API for jokes project

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      certificateEdge: adce1a21-90b4-4120-8548-111215e582f0
      certificateRegional: 5d4db894-c9fc-42ca-8f80-3c5da6c1678e
      corsDomain: https://jokes.dbowland.com
      domain: jokes-api.dbowland.com
      domainInternal: jokes-api-internal.dbowland.com
      logStreamFunction: log-subscriber
      table: jokes-api
      userPool: us-east-2_cPuwPJkP8
      userPoolClient: 5mujt7f6h9jh6pudk0t8ekngu
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificateEdge: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      certificateRegional: 14a32175-0c26-4768-b71f-3fa611b8f5a2
      corsDomain: https://jokes.bowland.link
      domain: jokes-api.bowland.link
      domainInternal: jokes-api-internal.bowland.link
      logStreamFunction: log-subscriber-test
      table: jokes-api-test
      userPool: us-east-2_BwzCUS5q1
      userPoolClient: o86e0r33q0pfekelprpcvmdou
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for emails-email-api
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domainInternal]
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateEdge]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub
                - 'https://cognito-idp.us-east-2.amazonaws.com/${UserPool}'
                - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
              audience:
                - !FindInMap [EnvironmentMap, !Ref Environment, userPoolClient]
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateRegional]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
      FailOnWarnings: true
      StageName: v1

  # SAM won't create two Route53 records, so the HttpApi domain name is created separately
  HttpRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub '${HttpApi.DomainName.RegionalDomainName}'
        HostedZoneId: !Sub '${HttpApi.DomainName.RegionalHostedZoneId}'
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A

  # Lambda

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/delete-item.deleteByIdHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: delete
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  DeleteItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteItemLogGroup

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-all-items.getAllItemsHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllItemsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllItemsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllItemsLogGroup

  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-by-id.getByIdHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetByIdFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  GetByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetByIdLogGroup

  GetTtsByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-tts-by-id.getByIdHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api get TTS by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
        # Access to use Polly for TTS
        - Version: 2012-10-17
          Statement:
            - Action:
                - 'polly:SynthesizeSpeech'
              Effect: Allow
              Resource: '*'
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}/tts
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}/tts
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active

  GetTtsByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetTtsByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTtsByIdFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  GetTtsByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetTtsByIdLogGroup

  GetCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-count.getCountHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api get joke count
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/count
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/count
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetCountLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetCountFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetCountFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  GetCountLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetCountLogGroup

  GetRandomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-random.getRandomHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api get random jokes
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
          RANDOM_COUNT_MAXIMUM: 10
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/random
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/random
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  GetRandomLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetRandomFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRandomFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  GetRandomLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetRandomLogGroup

  PatchItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/patch-item.patchItemHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: jokes-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: patch
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes/{index}
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  PatchLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchLogGroup

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/post-item.postItemHandler
      CodeUri: './dist'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 192
      Description: jokes-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /jokes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  PostLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'jokes-api'
        - Key: 'created-for'
          Value: 'jokes'
        - Key: 'environment'
          Value: !Ref Environment

  PostLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostLogGroup

  # Database

  JokesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Index
        Type: Number
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, table]
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
        'environment': !Ref Environment
