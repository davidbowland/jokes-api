AWSTemplateFormatVersion: 2010-09-09
Description: >-
  jokes-api

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  AccountId:
    Type: String
    Description: AWS account ID
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      certificate: adce1a21-90b4-4120-8548-111215e582f0
      corsDomain: https://jokes.dbowland.com
      domain: jokes-api.dbowland.com
      table: jokes-api
      userPool: us-east-2_JLHXqBLCP
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificate: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      corsDomain: https://jokes.bowland.link
      domain: jokes-api-test.bowland.link
      table: jokes-api-test
      userPool: us-east-2_JLHXqBLCP
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Sub
              - 'arn:aws:cognito-idp:us-east-2:${AccountId}:userpool/${UserPool}'
              - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
            AuthType: 'COGNITO_USER_POOLS'
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub
          - "'${CorsDomain}'"
          - CorsDomain: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
        AllowCredentials: true
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-1:${AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  Gateway400Response:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub
          - "'${CorsDomain}'"
          - CorsDomain: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PATCH,POST,PUT'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref Api

  Gateway500Response:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub
          - "'${CorsDomain}'"
          - CorsDomain: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PATCH,POST,PUT'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref Api

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/delete-item.deleteByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: delete
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  DeleteItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteItemFunction}
      RetentionInDays: 30

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-all-items.getAllItemsHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes
            Method: get
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllItemsFunction}
      RetentionInDays: 30

  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-by-id.getByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: get
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetByIdFunction}
      RetentionInDays: 30

  GetRandomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-random.getRandomHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api get random jokes
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
          RANDOM_COUNT_MAXIMUM: 10
      Events:
        NoAuth:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/random
            Method: get
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  GetRandomLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetRandomFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRandomFunction}
      RetentionInDays: 30

  PatchItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/patch-item.patchItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: patch
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchItemFunction}
      RetentionInDays: 30

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/post-item.postItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes
            Method: post
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PostLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostItemFunction}
      RetentionInDays: 30

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/put-item.putItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: jokes-api put item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JokesTable
      Environment:
        Variables:
          API_URL: !Sub
            - 'https://${Domain}/v1/jokes'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref JokesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /jokes/{index}
            Method: put
            Auth:
              Authorizer: CognitoAuth
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'

  PutLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PutItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutItemFunction}
      RetentionInDays: 30

  JokesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Index
        Type: Number
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, table]
      Tags:
        'created-by': 'jokes-api'
        'created-for': 'jokes'
